document.addEventListener("DOMContentLoaded", function () {
    const task = window.task;  // –ø–æ–ª—É—á–∏–ª–∏ –∏–∑ —à–∞–±–ª–æ–Ω–∞

    if (!task) {
        console.error("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —à–∞–±–ª–æ–Ω");
        return;
    }

    console.log(task); // –ø—Ä–æ–≤–µ—Ä–∏–º –µ—â–µ —Ä–∞–∑

    switch (task.type) {
        case "1":
            renderMissedWordTask(task);
            break;
        case "2":
            renderOrderingTask(task);
            break;
        case "3":
            renderPronunciationTask(task);
            break;
        case "4":
            renderAuditionTask(task);
            break;
        default:
            console.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:", task.type);
    }
});

function renderMissedWordTask(task) {
    const container = document.querySelector(".task-list");
    container.innerHTML = ""; // –û—á–∏—â–∞–µ–º

    const question = document.createElement("p");
    question.textContent = task.question;
    container.appendChild(question);

    const sentence = document.createElement("p");
    sentence.innerHTML = task.sentence_without_a_word.replace("___", "<strong>___</strong>");
    container.appendChild(sentence);

    const form = document.createElement("form");
    form.classList.add("variants-form");

    task.variants.forEach((variant, index) => {
        const label = document.createElement("label");
        label.classList.add("variant-label");

        const input = document.createElement("input");
        input.type = "radio";
        input.name = "missed_word";
        input.value = variant;

        const span = document.createElement("span");
        span.textContent = variant;

        label.appendChild(input);
        label.appendChild(span);
        form.appendChild(label);
    });

    const submit = document.createElement("button");
    submit.type = "submit";
    submit.textContent = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å";
    submit.classList.add("check-btn");
    form.appendChild(submit);

    const result = document.createElement("p");
    result.classList.add("result-text");

    form.addEventListener("submit", function (e) {
        e.preventDefault();
        const selected = form.querySelector("input[name='missed_word']:checked");
        if (!selected) {
            result.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç!";
            result.style.color = "orange";
            return;
        }

        if (selected.value.trim().toLowerCase() === task.missed_word.trim().toLowerCase()) {
            result.textContent = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ";
            result.style.color = "green";
            saveProgress(task.id).then(r => {

            });
            container.appendChild(createNextButton());
        } else {
            result.textContent = `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå.`;
            result.style.color = "red";
        }
    });

    container.appendChild(form);
    container.appendChild(result);
}

function renderOrderingTask(task) {
    const container = document.querySelector(".task-list");
    container.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

    const question = document.createElement("p");
    question.textContent = task.question;
    container.appendChild(question);

    const sentenceContainer = document.createElement("div");
    sentenceContainer.classList.add("ordering-container");

    const items = task.sentence_for_ordering.split(" ");  // –†–∞–∑–¥–µ–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ —Å–ª–æ–≤–∞
    const originalOrder = [...items];  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤
    let userOrder = [];  // –≠—Ç–æ –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ—Ä—è–¥–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–ª–∏—Ç–∫–∏
    shuffleArray(items).forEach((item, index) => {
        const itemElement = document.createElement("button");
        itemElement.classList.add("ordering-item");
        itemElement.textContent = item; // –ü–æ–∫–∞–∑–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è
        itemElement.addEventListener("click", function() {
            if (userOrder.length < items.length) { // –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ —Å–ª–æ–≤
                userOrder.push(item);  // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                itemElement.disabled = true;  // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
                renderUserOrder();  // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            }
        });

        sentenceContainer.appendChild(itemElement);
    });

    container.appendChild(sentenceContainer);

    const userOrderContainer = document.createElement("div");
    userOrderContainer.classList.add("user-order-container");
    container.appendChild(userOrderContainer);

    const checkButton = document.createElement("button");
    checkButton.textContent = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å";
    checkButton.classList.add("check-btn");
    container.appendChild(checkButton);

    const resultText = document.createElement("p");
    resultText.classList.add("result-text");
    container.appendChild(resultText);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å"
    checkButton.addEventListener("click", function() {
        if (userOrder.length !== items.length) {
            resultText.textContent = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã!";
            resultText.style.color = "orange";
            return;
        }

        if (JSON.stringify(userOrder) === JSON.stringify(originalOrder)) {
            resultText.textContent = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ ‚úÖ";
            resultText.style.color = "green";
            saveProgress(task.id).then(r => {

            });
            container.appendChild(createNextButton());
        } else {
            resultText.textContent = `–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚ùå.`;
            resultText.style.color = "red";
        }
    });

    function renderUserOrder() {
        userOrderContainer.innerHTML = "";  // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä

        userOrder.forEach(item => {
            const itemElement = document.createElement("div");
            itemElement.textContent = item;
            userOrderContainer.appendChild(itemElement);
        });
    }
}

function shuffleArray(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

function renderPronunciationTask(task) {
    console.log(task);
    const container = document.getElementById("task-container");
    container.innerHTML = ""; // –æ—á–∏—Å—Ç–∫–∞

    const wordElem = document.createElement("h3");
    wordElem.textContent = task.word || "–ü—Ä–æ–∏–∑–Ω–µ—Å–∏—Ç–µ —Å–ª–æ–≤–æ";

    const audio = new Audio(task.audio_url); // –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ

    const playBtn = document.createElement("button");
    playBtn.textContent = "üîä –°–ª—É—à–∞—Ç—å";
    playBtn.onclick = () => audio.play();

    const recordBtn = document.createElement("button");
    recordBtn.textContent = "üé§ –ó–∞–ø–∏—Å–∞—Ç—å";

    const status = document.createElement("p");
    status.textContent = "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.";

    let mediaRecorder;
    let chunks = [];
    let isRecording = false;

    recordBtn.onclick = async () => {
        if (isRecording) {
            mediaRecorder.stop();
            isRecording = false;
            status.textContent = "–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å—å...";
            recordBtn.textContent = "üé§ –ó–∞–ø–∏—Å–∞—Ç—å";
            return;
        }

        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
            alert("–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å –∑–≤—É–∫–∞.");
            return;
        }

        try {
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            mediaRecorder = new MediaRecorder(stream);
            chunks = [];

            mediaRecorder.ondataavailable = (e) => chunks.push(e.data);
            mediaRecorder.onstop = () => {
                const blob = new Blob(chunks, { type: 'audio/webm' });
                const recordedAudio = new Audio(URL.createObjectURL(blob));
                recordedAudio.controls = true;
                container.appendChild(recordedAudio);

                status.textContent = "–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞.";
                console.log("–ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞ —á–∞–Ω–∫–æ–≤:", chunks.length);
            };

            mediaRecorder.start();
            isRecording = true;
            status.textContent = "–ò–¥—ë—Ç –∑–∞–ø–∏—Å—å... –Ω–∞–∂–º–∏—Ç–µ —Å–Ω–æ–≤–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.";
            recordBtn.textContent = "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å";
            console.log("–ù–∞—á–∞–ª–∞—Å—å –∑–∞–ø–∏—Å—å");
        } catch (err) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:", err);
            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –∑–≤—É–∫–∞. –°–º. –∫–æ–Ω—Å–æ–ª—å.");
        }
    };

    container.appendChild(wordElem);
    container.appendChild(playBtn);
    container.appendChild(recordBtn);
    container.appendChild(status);
}

function renderAuditionTask(task) {
    console.log(task);
    const container = document.getElementById("task-container");
    container.innerHTML = ""; // –æ—á–∏—Å—Ç–∫–∞

    const instruction = document.createElement("h3");
    instruction.textContent = "–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∞—É–¥–∏–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—ã —É—Å–ª—ã—à–∞–ª–∏:";

    const audio = new Audio(task.audio_url);

    const playBtn = document.createElement("button");
    playBtn.textContent = "üîä –°–ª—É—à–∞—Ç—å";
    playBtn.onclick = () => audio.play();

    const input = document.createElement("input");
    input.type = "text";
    input.placeholder = "–í–≤–µ–¥–∏—Ç–µ —É—Å–ª—ã—à–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ/—Ñ—Ä–∞–∑—É";

    const checkBtn = document.createElement("button");
    checkBtn.textContent = "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å";

    const result = document.createElement("p");

    checkBtn.onclick = () => {
        const userAnswer = input.value.trim().toLowerCase();
        const correctAnswer = task.word.trim().toLowerCase();
        if (userAnswer === correctAnswer) {
            result.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
            result.style.color = "green";
        } else {
            result.textContent = `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${task.word}`;
            result.style.color = "red";
        }
    };

    container.appendChild(instruction);
    container.appendChild(playBtn);
    container.appendChild(input);
    container.appendChild(checkBtn);
    container.appendChild(result);
}


function createNextButton() {
    const nextBtn = document.createElement("button");
    nextBtn.textContent = "‚û°Ô∏è –î–∞–ª–µ–µ";
    nextBtn.classList.add("next-btn");
    nextBtn.onclick = () => {
        if (window.nextTaskUrl) {
            window.location.href = window.nextTaskUrl;
        } else if (window.nextTopicUrl) {
            window.location.href = window.nextTopicUrl;
        } else {
            window.location.href = window.courses;
        }
    };
    return nextBtn;
}


async function saveProgress(taskId, score = 100) {
    try {
        const response = await fetch("/courses/save_task_progress/", {
            method: "POST",
            headers: {
                "X-CSRFToken": getCSRFToken(),
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({
                task_id: taskId,
                score: score,
            }),
        });

        const data = await response.json();
        if (!response.ok) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", data);
        } else {
            console.log("–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", data);
        }
    } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:", err);
    }
}

function getCSRFToken() {
    const cookie = document.cookie.split(";").find(c => c.trim().startsWith("csrftoken="));
    return cookie ? cookie.split("=")[1] : "";
}
